#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int *par;
int *size;

int findPar(int u) {
    if (par[u] == u) {
        return u;
    }
    return par[u] = findPar(par[u]);
}

void merge(int p1, int p2) {
    if (size[p1] > size[p2]) {
        par[p2] = p1;
        size[p1] += size[p2];
    } else {
        par[p1] = p2;
        size[p2] += size[p1];
    }
}

int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
    int n = graph.size();
    par = new int[n];
    size = new int[n];

    for (int i = 0; i < n; ++i) {
        par[i] = i;
        size[i] = 1;
    }

    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            if (graph[i][j] == 1) {
                int p1 = findPar(i);
                int p2 = findPar(j);

                if (p1 != p2) {
                    merge(p1, p2);
                }
            }
        }
    }

    vector<int> infected(n, 0);
    for (int e : initial) {
        int p = findPar(e);
        infected[p]++;
    }

    int ans = -1;
    int maxSize = -1;
    for (int e : initial) {
        int p = findPar(e);
        if (infected[p] == 1 && size[p] >= maxSize) {
            if (maxSize == size[p]) {
                ans = min(ans, e);
            } else {
                ans = e;
            }
            maxSize = size[p];
        }
    }

    if (ans == -1) {
        int min_value = n + 1;
        for (int e : initial) {
            min_value = min(min_value, e);
        }
        return min_value;
    }

    return ans;
}

int main() {
    // Hardcoded input
    int n = 3;
    vector<vector<int>> graph = {{1, 1, 0},
                                 {1, 1, 0},
                                 {0, 0, 1}};
    int m = 2;
    vector<int> initial = {0, 1};

    cout << minMalwareSpread(graph, initial) << endl;

    return 0;
}
